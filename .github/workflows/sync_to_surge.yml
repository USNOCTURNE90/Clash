name: Sync to Surge

on:
  push:
    branches:
      - main
      - master
    paths:
      - '**'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 2
          
      - name: Check commit message
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"[AUTO_SYNC]"* ]]; then
            echo "Skipping workflow as this is an automated sync commit"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Proceeding with sync"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up Python
        if: steps.check_commit.outputs.skip == 'false'
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          python -m pip install --upgrade pip
          
      - name: Configure Git
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
      - name: Debug environment
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          
      - name: Create and run sync script
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          cat > sync_to_surge.py << 'EOF'
          #!/usr/bin/env python3

          import os
          import re
          import time
          import subprocess
          from pathlib import Path
          import logging
          import traceback
          
          # 配置日志
          logging.basicConfig(
              level=logging.INFO,
              format="%(asctime)s - %(levelname)s - %(message)s"
          )
          logger = logging.getLogger(__name__)
          
          # 打印当前工作目录和内容
          print(f"Current directory: {os.getcwd()}")
          print(f"Directory contents: {list(Path('.').glob('*'))}")
          
          try:
              # 设置目录
              clash_dir = Path(".")
              surge_dir = Path("Surge")
              
              # 获取GitHub令牌
              github_token = os.environ.get("GITHUB_TOKEN", "")
              surge_repo = f"https://{github_token}@github.com/USNOCTURNE90/Surge.git"
              
              # 清理并克隆Surge仓库
              if surge_dir.exists():
                  import shutil
                  shutil.rmtree(surge_dir)
              
              print(f"Cloning repo: {surge_repo}")
              subprocess.run(["git", "clone", surge_repo, "Surge"], check=True)
              
              # 查找规则文件
              rule_files = []
              for file_path in clash_dir.glob("*"):
                  if not file_path.is_file() or file_path.name.startswith("."):
                      continue
                  
                  try:
                      with open(file_path, "r", encoding="utf-8") as f:
                          content = f.read()
                          if "rules:" in content and ("DOMAIN" in content or "IP-CIDR" in content):
                              rule_files.append(file_path)
                              print(f"Found rule file: {file_path.name}")
                  except Exception as e:
                      print(f"Error reading {file_path.name}: {str(e)}")
              
              if not rule_files:
                  print("No rule files found!")
                  print(f"All files: {list(clash_dir.glob('*'))}")
                  exit(1)
              
              # 处理规则文件
              for clash_file in rule_files:
                  with open(clash_file, "r", encoding="utf-8") as f:
                      clash_content = f.read()
                  
                  # 添加最后更新时间标记
                  current_time = time.strftime('%Y-%m-%d %H:%M:%S')
                  
                  # 转换为Surge格式
                  surge_rules = []
                  
                  # 提取现有注释
                  clash_lines = clash_content.splitlines()
                  comment_lines = []
                  
                  for line in clash_lines:
                      if line.startswith("#"):
                          comment_lines.append(line)
                      elif line.strip() == "rules:":
                          continue
                      else:
                          # 移除 Clash 格式的前缀
                          if line.startswith('  - '):
                              line = line[4:]
                              
                          if any(line.startswith(prefix) for prefix in ["DOMAIN-SUFFIX,", "DOMAIN-KEYWORD,", "DOMAIN,", "IP-CIDR,", "IP-ASN,", "PROCESS-NAME,"]):
                              surge_rules.append(line)
                  
                  # 添加注释
                  surge_content_lines = []
                  
                  # 添加更新时间注释
                  surge_content_lines.append(f"# 最后更新时间: {current_time}")
                  surge_content_lines.append(f"# 从Clash自动同步 - {current_time}")
                  surge_content_lines.append(f"# 原始文件: {clash_file.name}")
                  
                  # 添加原始注释（但不包括更新时间相关注释）
                  for comment in comment_lines:
                      if not ("最后更新时间" in comment or "自动同步" in comment or "原始文件" in comment):
                          surge_content_lines.append(comment)
                  
                  # 添加规则内容
                  surge_content_lines.extend(surge_rules)
                  surge_content = "\n".join(surge_content_lines)
                  
                  # 写入Surge规则文件
                  surge_file = surge_dir / clash_file.name
                  with open(surge_file, "w", encoding="utf-8") as f:
                      f.write(surge_content)
                  
                  print(f"Synced rule file: {clash_file.name}")
              
              # 提交更改
              subprocess.run(["git", "-C", "Surge", "add", "."], check=True)
              
              # 检查是否有更改
              result = subprocess.run(
                  ["git", "-C", "Surge", "status", "--porcelain"],
                  capture_output=True,
                  text=True,
                  check=True
              )
              
              if result.stdout.strip():
                  print("Changes found, committing...")
                  commit_message = f"[AUTO_SYNC] 从Clash自动同步规则集 - {time.strftime('%Y-%m-%d %H:%M:%S')}"
                  subprocess.run(
                      ["git", "-C", "Surge", "commit", "-m", commit_message],
                      check=True
                  )
                  
                  print("Pushing changes...")
                  subprocess.run(["git", "-C", "Surge", "push"], check=True)
                  print("Successfully synced rules to Surge repo")
              else:
                  print("No changes to commit")
          
          except Exception as e:
              print(f"Error: {str(e)}")
              traceback.print_exc()
              exit(1)
          EOF
          
          chmod +x sync_to_surge.py
          python sync_to_surge.py
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} 
