name: Sync to Surge

on:
  push:
    branches:
      - main
      - master
    paths:
      - '**'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 2
          
      - name: Check commit message
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ $COMMIT_MSG == *"[AUTO_SYNC]"* ]]; then
            echo "Skipping workflow as this is an automated sync commit"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Proceeding with sync"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Set up Python
        if: steps.check_commit.outputs.skip == 'false'
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          python -m pip install --upgrade pip
          
      - name: Configure Git
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
      - name: Debug environment
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          
      - name: Create and run sync script
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          cat > sync_rules.py << 'EOF'
          #!/usr/bin/env python3

          import os
          import re
          import time
          import subprocess
          from pathlib import Path
          import logging
          import traceback
          from datetime import datetime, timedelta
          import ipaddress
          
          # 配置日志
          logging.basicConfig(
              level=logging.INFO,
              format="%(asctime)s - %(levelname)s - %(message)s"
          )
          logger = logging.getLogger(__name__)
          
          # 获取中国时间
          def get_china_time():
              utc_now = datetime.utcnow()
              china_time = utc_now + timedelta(hours=8)
              return china_time.strftime('%Y-%m-%d %H:%M:%S')
          
          # 检查和处理规则行
          def process_rule_line(line, is_surge=True):
              line = line.strip()
              if not line or line.startswith("#"):
                  return line
              
              # 去除Clash格式的前缀
              if line.startswith('  - '):
                  line = line[4:]
              
              # 检查是否已有前缀
              known_prefixes = ["DOMAIN-SUFFIX,", "DOMAIN-KEYWORD,", "DOMAIN,", "IP-CIDR,", "IP-ASN,", "PROCESS-NAME,"]
              if any(line.startswith(prefix) for prefix in known_prefixes):
                  return line
                  
              # 检查是否是域名（包含点）
              if "." in line:
                  try:
                      # 检查是否是纯数字IP
                      parts = line.split('.')
                      if all(part.isdigit() for part in parts):
                          # 尝试解析为IP地址
                          ipaddress.ip_address(line)
                          # 如果是有效IP，添加IP-CIDR前缀和/32
                          return f"IP-CIDR,{line}/32" if is_surge else f"- IP-CIDR,{line}/32"
                      else:
                          # 是域名，添加DOMAIN-SUFFIX前缀
                          return f"DOMAIN-SUFFIX,{line}" if is_surge else f"- DOMAIN-SUFFIX,{line}"
                  except ValueError:
                      # 不是有效IP，当作域名处理
                      return f"DOMAIN-SUFFIX,{line}" if is_surge else f"- DOMAIN-SUFFIX,{line}"
              else:
                  # 没有点，作为进程名处理
                  return f"PROCESS-NAME,{line}" if is_surge else f"- PROCESS-NAME,{line}"
          
          # 打印当前工作目录和内容
          print(f"Current directory: {os.getcwd()}")
          print(f"Directory contents: {list(Path('.').glob('*'))}")
          
          try:
              # 设置目录
              dir_path = Path(".")
              
              # 查找规则文件
              rule_files = []
              for file_path in dir_path.glob("*"):
                  if not file_path.is_file() or file_path.name.startswith(".") or file_path.name.endswith(".yml") or file_path.name.endswith(".py"):
                      continue
                  
                  try:
                      with open(file_path, "r", encoding="utf-8") as f:
                          content = f.read()
                          if "rules:" in content or "DOMAIN" in content or "IP-CIDR" in content or "." in content:
                              rule_files.append(file_path)
                              print(f"Found rule file: {file_path.name}")
                  except Exception as e:
                      print(f"Error reading {file_path.name}: {str(e)}")
              
              if not rule_files:
                  print("No rule files found!")
                  print(f"All files: {list(dir_path.glob('*'))}")
                  exit(1)
              
              # 记录有修改的文件
              modified_files = []
              
              # 处理规则文件
              for rule_file in rule_files:
                  with open(rule_file, "r", encoding="utf-8") as f:
                      file_content = f.read()
                  
                  # 添加最后更新时间标记
                  current_time = get_china_time()
                  
                  # 转换格式
                  processed_rules = []
                  
                  # 提取现有注释
                  content_lines = file_content.splitlines()
                  comment_lines = []
                  has_rules_keyword = False
                  
                  for line in content_lines:
                      if line.startswith("#"):
                          comment_lines.append(line)
                      elif line.strip() == "rules:":
                          has_rules_keyword = True
                          continue
                      else:
                          # 处理规则行
                          processed_line = process_rule_line(line, is_surge=True)
                          if processed_line and not processed_line.startswith("#"):
                              processed_rules.append(processed_line)
                  
                  # 添加注释
                  new_content_lines = []
                  
                  # 添加更新时间注释
                  new_content_lines.append(f"# 最后更新时间: {current_time} (北京时间)")
                  
                  # 如果文件是Clash格式，添加转换提示
                  if has_rules_keyword:
                      new_content_lines.append(f"# 从Clash格式自动处理 - {current_time} (北京时间)")
                  else:
                      new_content_lines.append(f"# 规则自动格式化 - {current_time} (北京时间)")
                  
                  # 添加原始注释（但不包括更新时间相关注释）
                  for comment in comment_lines:
                      if not ("最后更新时间" in comment or "自动同步" in comment or "自动处理" in comment or "规则自动格式化" in comment):
                          new_content_lines.append(comment)
                  
                  # 添加规则内容
                  new_content_lines.extend(processed_rules)
                  new_content = "\n".join(new_content_lines)
                  
                  # 检查内容是否有变化
                  if new_content != file_content:
                      # 写入处理后的规则文件
                      with open(rule_file, "w", encoding="utf-8") as f:
                          f.write(new_content)
                      
                      modified_files.append(rule_file.name)
                      print(f"Processed rule file: {rule_file.name}")
              
              # 提交更改
              if modified_files:
                  print(f"Modified files: {modified_files}")
                  subprocess.run(["git", "add", "."], check=True)
                  
                  # 检查是否有更改
                  result = subprocess.run(
                      ["git", "status", "--porcelain"],
                      capture_output=True,
                      text=True,
                      check=True
                  )
                  
                  if result.stdout.strip():
                      print("Changes found, committing...")
                      china_time = get_china_time()
                      commit_message = f"[AUTO_FORMAT] 自动格式化规则集 - {china_time} (北京时间)"
                      subprocess.run(
                          ["git", "commit", "-m", commit_message],
                          check=True
                      )
                      
                      print("Pushing changes...")
                      subprocess.run(["git", "push"], check=True)
                      print("Successfully updated rules")
                  else:
                      print("No changes to commit after all")
              else:
                  print("No files were modified")
          
          except Exception as e:
              print(f"Error: {str(e)}")
              traceback.print_exc()
              exit(1)
          EOF
          
          chmod +x sync_rules.py
          python sync_rules.py
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
